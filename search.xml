<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>数组</title>
      <link href="/2018/11/15/%E6%95%B0%E7%BB%84/"/>
      <url>/2018/11/15/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ul><li>基本定义：数组是一种线性表结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。</li><li>线性表：顾名思义，像线一样排列，只有前后两个方向，除了数组，链表、队列、栈等也是线性表。如下图：<br><img src="https://raw.githubusercontent.com/HuangMingFrancis/ImgRes/master/blog/%E6%95%B0%E7%BB%84/1.jpg" alt="image"> </li></ul><h2 id="数组优势和劣势"><a href="#数组优势和劣势" class="headerlink" title="数组优势和劣势"></a>数组优势和劣势</h2><ul><li>优势：因为数组拥有连续的内存空间和相同的数据类型，所以在读取数据这块优于其他数据结构。根据下标随机访问的复杂度为O(1)</li><li>劣势：数组在插入和删除上比较低效，如果在数组的某个位置插入一条数据，则这个位置后面的所有数据都要后移。删除也是相同的，时间复杂度为O(n)<a id="more"></a><h2 id="如何实现数组"><a href="#如何实现数组" class="headerlink" title="如何实现数组"></a>如何实现数组</h2></li><li>基本每一种语言，都会提供数组这种数据类型</li><li>数组在定义时就要预先指定大小，因为要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</li><li>数组的读取是从0开始的，比如a数组长度为3，对应的数据就是a[0]，a[1]，a[2]</li><li>警惕数组的访问越界问题，比如a数组长度为3，然后调用a[4]，程序运行时就会报错</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="（1）如何优化数组删除操作"><a href="#（1）如何优化数组删除操作" class="headerlink" title="（1）如何优化数组删除操作"></a>（1）如何优化数组删除操作</h3><p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。每次的删除操作并不是真正的搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p><p><font color="#ff0000">这个就是JVM标记清除垃圾回收算法的核心思想。</font>以前死记硬背数据结构和算法，忘得特别快，但是现在使用联想的方法，将枯燥的概念和具体的实际应用相结合，更加能理解了它的设计思想。</p><h3 id="（2）容器和数组的区别"><a href="#（2）容器和数组的区别" class="headerlink" title="（2）容器和数组的区别"></a>（2）容器和数组的区别</h3><p>针对数组类型，很多语言都提供了容器类，比如JAVA的ArrayList，它和数组的最大差别就是，它支持动态扩容，之前我们提到如果数组的空间不够，需要重新分配一个更大的空间，并把原来的数据复制过去。而ArrayList已经实现了这个功能。但是，扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据的大小，最好在创建ArrayList的时候事先指定数据大小。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>时间复杂度分析</title>
      <link href="/2018/11/12/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2018/11/12/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是复杂度分析"><a href="#什么是复杂度分析" class="headerlink" title="什么是复杂度分析"></a>什么是复杂度分析</h2><ul><li>数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行更快和如何让代码更省空间。  </li><li>对应的就是时间复杂度和空间复杂度两个概念。  </li><li>这里的复杂度是渐进式复杂度，分析的是算法执行效率与数据规模之间的增长关系。</li></ul><h2 id="为什么要进行复杂度分析"><a href="#为什么要进行复杂度分析" class="headerlink" title="为什么要进行复杂度分析"></a>为什么要进行复杂度分析</h2><ul><li>它是开发和选择算法的一个重要依据。  </li><li>和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。</li><li>掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</li></ul><a id="more"></a><h2 id="如何进行复杂度分析"><a href="#如何进行复杂度分析" class="headerlink" title="如何进行复杂度分析"></a>如何进行复杂度分析</h2><h3 id="（1）大O表示法"><a href="#（1）大O表示法" class="headerlink" title="（1）大O表示法"></a>（1）大O表示法</h3><ul><li>来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。</li><li>特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。</li></ul><h3 id="（2）复杂度分析法则"><a href="#（2）复杂度分析法则" class="headerlink" title="（2）复杂度分析法则"></a>（2）复杂度分析法则</h3><ul><li>单段代码看高频：比如循环。</li><li>多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。</li><li>嵌套代码求乘积：比如递归、多重循环等</li><li>多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。 </li></ul><h2 id="常用的复杂度级别？"><a href="#常用的复杂度级别？" class="headerlink" title="常用的复杂度级别？"></a>常用的复杂度级别？</h2><ul><li>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）</li><li>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。<br>O(2^n)（指数阶）、O(n!)（阶乘阶）<br>下图列出了几个主要的时间复杂度，可以让你对时间复杂度有个更直观的印象。<br><img src="https://raw.githubusercontent.com/HuangMingFrancis/ImgRes/master/blog/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/1.jpg" alt="image"> </li></ul><h2 id="复杂度分析的四个概念"><a href="#复杂度分析的四个概念" class="headerlink" title="复杂度分析的四个概念"></a>复杂度分析的四个概念</h2><h3 id="（1）最好、最坏情况时间复杂度"><a href="#（1）最好、最坏情况时间复杂度" class="headerlink" title="（1）最好、最坏情况时间复杂度"></a>（1）最好、最坏情况时间复杂度</h3><p>以下面代码为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// n 表示数组 array 的长度</span><br><span class="line">int find(int[] array, int n, int x) &#123;</span><br><span class="line">  int i = 0;</span><br><span class="line">  int pos = -1;</span><br><span class="line">  for (; i &lt; n; ++i) &#123;</span><br><span class="line">    if (array[i] == x) &#123;</span><br><span class="line">       pos = i;</span><br><span class="line">       break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码很简单，查找数组中是否存在某个变量，有则返回该变量的位置，没有返回-1。</p><ul><li>最好情况时间复杂度，遍历第一个的数据就找到该变量，这段代码为O(1)</li><li>最坏情况时间复杂度，遍历整个数组都没有找到该变量，这段代码为O(n)</li></ul><h3 id="（2）平均情况复杂度"><a href="#（2）平均情况复杂度" class="headerlink" title="（2）平均情况复杂度"></a>（2）平均情况复杂度</h3><p>用代码在所有情况下执行的次数的加权平均值表示。</p><h3 id="（3）均摊时间复杂度"><a href="#（3）均摊时间复杂度" class="headerlink" title="（3）均摊时间复杂度"></a>（3）均摊时间复杂度</h3><p>在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</p><h2 id="如何掌握好复杂度分析方法？"><a href="#如何掌握好复杂度分析方法？" class="headerlink" title="如何掌握好复杂度分析方法？"></a>如何掌握好复杂度分析方法？</h2><p>复杂度分析关键在于多练，所谓孰能生巧。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/12/hello-world/"/>
      <url>/2018/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
